generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  username     String         @unique
  password     String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  awards       Award[]
  awardMembers AwardMember[]
  Category     Category[]
  NomineeGroup NomineeGroup[]

  @@index([username])
  @@map("users")
}

model Award {
  id              String          @id @default(uuid())
  name            String
  description     String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdBy       String
  owner           User            @relation(fields: [createdBy], references: [id])
  status          AwardStatus     @default(WAITING)
  members         AwardMember[]
  inviteCode      String          @unique
  awardCategories AwardCategory[]

  @@index([createdBy])
  @@index([inviteCode])
  @@map("awards")
}

model AwardMember {
  awardId   String
  userId    String
  role      AwardMemberRole @default(MEMBER)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  award     Award           @relation(fields: [awardId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([awardId, userId])
  @@index([awardId])
  @@index([userId])
  @@map("award_members")
}

enum AwardMemberRole {
  MEMBER
  OWNER
}

enum AwardStatus {
  WAITING
  VOTING
  FINISHED
}

model Category {
  id             String          @id @default(uuid())
  name           String
  description    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  public         Boolean         @default(false)
  createdBy      String
  tags           String[]        @default([])
  creator        User            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  nomineeGroup   NomineeGroup?   @relation(fields: [nomineeGroupId], references: [id])
  nomineeGroupId String?
  AwardCategory  AwardCategory[]

  @@index([name])
  @@map("categories")
}

model AwardCategory {
  awardId    String
  categoryId String
  award      Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([awardId, categoryId])
  @@index([awardId])
  @@index([categoryId])
  @@map("award_categories")
}

model NomineeGroup {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  nominees    Nominee[]
  categories  Category[]
  creator     User       @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([name])
  @@map("nominee_groups")
}

model Nominee {
  id             String        @id @default(uuid())
  name           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  nomineeGroup   NomineeGroup? @relation(fields: [nomineeGroupId], references: [id])
  nomineeGroupId String

  @@index([name])
  @@map("nominees")
}
